% Plots the vector field generated by the gradient of the Hamiltonian
clear all
close all
warning off
clc

%% Parameters
gridsize = 11;
N = gridsize^2;
a0 = 1.5;
Rcell = 0.2*a0;
% K = 10;
% Con = 5;
Klist = [3 6 10 15 17 20]; % (a0=1.5) [3 6 10 15 17 20]; % (a0=0.5) [10 10 14 19 16 18]; %[3]; 
Conlist = [24 21 21 20 14 14]; % (a0=1.5) [24 21 21 20 14 14]; % (a0=0.5) [5 21 16 14 8 6]; %[24];

% Calculate fN
[dist, pos] = init_dist_hex(gridsize, gridsize);
dist_vec = dist(1,:);
r = a0*dist_vec(dist_vec>0); % exclude self influence
fN = sum(Rcell*sum(exp(Rcell-r)./r)); % calculate signaling strengthN

%% Plot gradient vector field with gradient trajectories
for j=1:numel(Klist)
    K = Klist(j);
    Con = Conlist(j);
    %syms p I %Con fN K
    h = @(p, I) -0.5*(Con-1)*(1 + 4*fN.*p.*(1-p).*I + fN*(2*p-1).^2) ...
        -(2*p-1).*(0.5*(Con+1)*(1+fN) - K);
    delh_delp = @(p,I) (Con-1)*2*fN*(I-1).*(2*p - 1) -(Con+1)*(fN+1)+2*K;
    delh_delI = @(p,I) 2*fN*(Con - 1)*p.*(p - 1);

    h=figure(j);
    hold on
    % Plot vector field
    pv = (0:5:N)/N;
    Iv = -1:0.1:1;
    [pm, Im] = meshgrid(pv, Iv);
    vf_x = -delh_delp(pm, Im);
    vf_y = -delh_delI(pm, Im);
    quiver(pm, Im, vf_x, vf_y, 'LineWidth', 0.8, 'AutoScaleFactor', 1.2);
    
    %----------------------------------------------------------------------
    % Plot streamlines
    %{
    startx = (0:3:N)/N;
    starty = zeros(size(startx));
    plot1 = streamline(pm, Im, vf_x, vf_y, startx, starty);
    set(gca,'FontSize', 24)
    set(plot1, 'Color', [0 1 0]);
    xlabel('p', 'FontSize', 24)
    ylabel('I', 'FontSize', 24)
    xlim([-0.1 1.1]);
    ylim([-0.2 1.1]);
    hold off
    %}    
    % Save
    qsave = 0;
    if qsave
        fname_str = strrep(sprintf('h_vf_gradient_traj_N_%d_K_%d_Con_%d_a0_%.1f', N, K, Con, a0), '.', 'p');
        fname = fullfile(pwd, 'rebuttal', 'h_vector_field', fname_str);
        save_figure_pdf(h, 10, 8, fname);
    end
    
    %----------------------------------------------------------------------
    % Plot individual trajectories
    fig_idx = j; %numel(Klist)+j;
    h2 = figure(fig_idx);
    hold on
    %{
    % first plot vector field
    pv = (0:5:N)/N;
    Iv = -1:0.1:1;
    [pm, Im] = meshgrid(pv, Iv);
    vf_x = -delh_delp(pm, Im);
    vf_y = -delh_delI(pm, Im);
    quiver(pm, Im, vf_x, vf_y, 'LineWidth', 0.8, 'AutoScaleFactor', 1.2);
    %}
    
    nv = 0:3:N; %values of N to consider
    pend = zeros(numel(nv), 1);
    pini = pend;
    Iend = pend;
    Iini = pend;
    straux = '(\d+)';
    straux2 = '(\w+)';
    
    %-----------------------File name to load-----------------------------
    % no noise, simulation
    fpattern = sprintf('N%d_n%s_neq_%s_a0%d_K_%d_Son_%d_t_%s-v%s',...
        N, straux, straux, 10*a0, K, Con, straux, straux);
    
    % noise, simulation
    %tmax = 200;
    %fpattern = strrep(sprintf('N%d_n%s_neq_%s_a0_%.1f_K_%d_Con_%d_noise_%s_t_%d-v%s',...
    % 	N, straux, straux, a0, K, Con, straux2, tmax, straux), '.', 'p');
    
    % p, I algorithm, no noise
    %I_ini = 0;
    %fpattern = sprintf('N%d_n%s_I0_%d_neq_%s_a0%d_K_%d_Son_%d_t_%s_MonteCarlo-v%s',...
    %    N, straux, I_ini, straux, 10*a0, K, Con, straux, straux);
    
    %-----------------------Load data--------------------------------------
    % Get all file names in the directory
    subfolder = sprintf('K%d_Con%d', K, Con);
    path = fullfile(pwd, 'rebuttal', 'h_vector_field', 'data', 'a0_1p5_figS4', subfolder); %'a0_1p5_figS4_noise_3_alpha_min' %'MonteCarlo_a0_0p5_1p5'
    listing = dir(path);
    num_files = numel(listing)-2; %first two entries are not useful
    count = 0;
    for i = 1:num_files
        filename = listing(i+2).name;
        % remove extension and do not include txt filesc
        [~,name,ext] = fileparts(filename);
        if strcmp(ext, '.mat')
            count = count + 1;
            names{count} = name;
        end
    end

    for i = 1:numel(names)
        % first get the filename given by the student
        [tokens, ~] = regexp(names{i},fpattern,'tokens','match');
        %idx = length(sprintf('N%d_n', N)) + 1; % index of the desired n
        %if ismember(matches{1}(idx), nv)
        if numel(tokens) > 0
            disp(names{i}) % displays the file name
            % load the data
            load(fullfile(path, strcat(names{i},'.mat')),...
                'iniON', 'I', 'Non', 'noise');
            % Get the sequence of p
            %p_traj = zeros(numel(cells_hist),1);
            %for k = 1:numel(cells_hist)
            %    p_traj(k) = sum(cells_hist{k})/N;
            %end
            p_traj = Non/N;
            if ismember(iniON, nv) % select trajectories to plot by nv
                figure(fig_idx);
                plot(p_traj, I, 'Color', [1 0 0], 'LineWidth', 1.5);
                pini(i) = p_traj(1);
                pend(i) = p_traj(end);
                Iini(i) = I(1);
                Iend(i) = I(end);
            end
        end
    end
    
    % Plot start and end marks
    figure(fig_idx);
    plot(pini, Iini, 'ro');
    plot(pend, Iend, 'rx');
    
    % Labelling
    set(gca,'FontSize', 24)
    xlabel('p', 'FontSize', 24)
    ylabel('I', 'FontSize', 24)
    xlim([-0.1 1.1]);
    ylim([-0.1 1.1]);
    hold off
    
    % Save
    qsave = 1;
    if qsave
        %fname_str = strrep(sprintf('h_vf_both_traj_noise_N_%d_K_%d_Con_%d_a0_%.1f_noise_%.2f',...
        %   N, K, Con, a0, noise), '.', 'p');
        %fname_str = strrep(sprintf('h_vf_both_traj_montecarlo_N_%d_K_%d_Con_%d_a0_%.1f', N, K, Con, a0), '.', 'p');
        %fname_str = strrep(sprintf('h_vf_both_traj_N_%d_K_%d_Con_%d_a0_%.1f', N, K, Con, a0), '.', 'p');
        fname_str = strrep(sprintf('h_vf_sim_traj_N_%d_K_%d_Con_%d_a0_%.1f', N, K, Con, a0), '.', 'p');
        fname = fullfile(pwd, 'rebuttal', 'h_vector_field', fname_str);
        save_figure_pdf(h2, 10, 8, fname);
    end
end
